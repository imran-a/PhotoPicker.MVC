@model PhotoPicker.MVC.Models.AppViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = @Model.Title;
}

<style>
.container { position:relative;}
.progress { background:transparent url('/content/bigloader.gif') no-repeat center center; }
.header { position:fixed; }
.gallery { margin-top:150px; }
</style>


<div class="container">
    <div id="spinner" style="position:fixed;display:block;top:0;right:0;height:66px;width:66px"></div>
    <div class="header">
        <h1>@Model.Title</h1>
        <div class="row">
            <div class="span9">
                <strong>WHO YOU:</strong>
                <span id="user-list">
                    @foreach (var user in Model.Users)
                    {
                        <button type="button" class="btn btn-primary user-button" data-user-id="@user.Id">@user.Name</button>
                    }   
                </span>
            </div>
        </div>
        <div class="row" id="view-mode-list" style="display:none">
            <div class="span7">
                <strong>VIEW MODE:</strong>
                <button type="button" class="btn btn-success" id="view-mode-all">All Photos</button>
                <button type="button" class="btn btn-success" id="view-mode-liked">Liked by You</button>
                <button type="button" class="btn btn-success" id="view-mode-all-liked">All Liked</button>
            </div>
            <div class="span3">
                LIKES: <span id="likes-current"></span> / <span id="likes-total"></span>
            </div>
        </div>
    </div>
    <div class="row gallery">
        <ul class="thumbnails" id="photo-list">
            
        </ul>
    </div>
</div>

<script id="tpl-thumbnail" type="text/template">
    <li class="span4">
        <div class="thumbnail">
            <a rel="gallery">
                <img src="<%=FilePath%>" style="width:300px;height:200px">
            </a>
            <button class="btn btn-info btn-mini like-button">Like</button>
            <span></span>
        </div>
    </li>
</script>


<script>
    $(function () {

        var _mShowAll = 'SHOWALL';
        var _mLiked = 'LIKED';
        var _mAllLiked = 'ALLLIKED';

        var app = app || {};
        app.Id = @Model.Id;
        app.ThumbImagePath = '@Model.ThumbImagePath';
        app.ImagePath = '@Model.ImagePath';
        app.FinalCount = @Model.FinalCount;

        app.ViewMode = new function () { 
            
            this.el = '#photo-list';
            var currentMode = 'NOTSET';
            var currentPage = 1;
            var ajaxImageLoading = false;
            var totalPages;
            var totalImages;
            var totalSelected;

            // get
            this.getCurrentMode = function () {
                return currentMode;
            }

            // set and initiate
            this.setCurrentMode = function (m) {
                
                // resets
                currentMode = m;
                currentPage = 1;
                
                // initial load
                this.load();
                this.initPaging();

            }

            this.load = function () {
                
                var o = this;
                
                var queryUrl = '';
                $(this.el).empty();
                var template = _.template($('#tpl-thumbnail').html());

                switch(currentMode) {
                    case _mShowAll:
                        queryUrl = '@Url.Action("GetAllPhotos", "App")';
                        break;
                    case _mLiked:
                        queryUrl = '@Url.Action("GetUserSelectedPhotos", "App")';
                        break;
                    case _mAllLiked:
                        queryUrl = '@Url.Action("GetAllLikedPhotos", "App")';
                        break;
                }

                $.get(queryUrl, { appId : app.Id, userId : app.CurrentUser.Id, page : currentPage }, function (res) {
                    
                    totalImages = res.TotalPhotos;
                    totalPages = res.Pages;
                    totalSelected = res.TotalSelected;
                    o.showCounts();

                    _.each(res.Photos, function (photo) {
                        
                        // append
                        var thumb = $(template({ FilePath : app.ThumbImagePath +  photo.ImageName }));
                        var b = $(thumb).find('button');
                        $(o.el).append(thumb);

                        // assign 'other' data attribute
                        if(currentMode == _mAllLiked) {

                            if(photo.Others != null)
                                $(b).data('others', photo.Others);

                            //if(photo.Others != null && photo.SelectedPhotoId == 0)
                                //$(b).hide();
                        }
                        else {
                            thumb.removeData('others');
                        }

                        // LIKE button states
                        if(photo.SelectedPhotoId >0) {
                            $(b).data('selected-id', photo.selectedId);
                            TogglePhotoLike(b, true);
                        }
                        else {
                            $(b).removeData('selected-id');
                            TogglePhotoLike(b, false);
                        }

                        // link path
                        $(thumb).find('a').attr('href', app.ImagePath + photo.ImageName);

                    });
                }).complete(function() { 
                    o.ajaxImageLoading = false;
                });

                // fancybox stuff
                $(".thumbnail a").fancybox({
                    prevEffect		: 'none',
                    nextEffect		: 'none',
                    closeBtn		: false,
                    helpers		: {
                        title	: { type : 'inside' },
                        buttons	: {}
                    }
                });


            },


            // initiate paging
            this.initPaging = function () {

                var o = this;

                $(window).scroll(function(){
                    if  ($(window).scrollTop() == $(document).height() - $(window).height()){
                        o.page();
                    }
                });
            }
            

            this.page = function () {

                if(this.ajaxImageLoading) { 
                    return;
                }
                console.log(totalPages, totalImages);
                if(currentPage > totalPages) {
                    currentPage += 1;
                    this.load();
                }
            },

            this.showCounts = function () {
            
                $('#likes-total').text(app.FinalCount);    
                $('#likes-current').text(totalSelected);
            },

            this.updateSelectedCount = function(liked) {
                if(liked) {
                    totalSelected += 1;
                }
                else {
                    totalSelected -= 1;
                }

                this.showCounts();
            }
            
        };

        // access to current selected user
        app.CurrentUser = function () { };

        // add listeners to the user buttons
        $('.user-button').live('click', function () {
            // set the default user and run default mode
            app.CurrentUser = new User($(this).data('user-id'), function () {
                $('#view-mode-list').slideDown();
            });
        });

        // add listeners to the view-mode changes
        $('#view-mode-all').click(function () {
            app.ViewMode.setCurrentMode(_mShowAll);
        });

        $('#view-mode-liked').click(function () {
            app.ViewMode.setCurrentMode(_mLiked);
        });

        $('#view-mode-all-liked').click(function () {
            app.ViewMode.setCurrentMode(_mAllLiked);
        });

        // add listeners to the like buttons 
        $('.like-button').live('click', function () {
            
            var b = $(this);
            alert('click');
            if( !$(b).data('selected-id') ) {
                
                // TODO - use a better selector here =>
                var imageName = $(b).prev().find('img').attr('src').replace( /^.*?([^/]+\..+?)$/, '$1' );
                app.CurrentUser.LikePhoto(imageName, function (id) {
                    if(id > 0) {
                        $(b).data('selected-id', id);
                        TogglePhotoLike($(b), true);
                        app.ViewMode.updateSelectedCount(true);
                    }
                    else { 
                        console.log('err1');
                        alert('error'); 
                    }
                });
            }
            else {
                app.CurrentUser.UnlikePhoto($(b).data('selected-id'), function () {
                    $(b).removeData('selected-id');
                    TogglePhotoLike($(b), false);
                    app.ViewMode.updateSelectedCount(false);
                });
            }
        });

        // ajax loading 
        $('#spinner')
            .ajaxStart(function() {$(this).addClass('progress'); })
            .ajaxStop(function(){$(this).removeClass('progress');  });

        function TogglePhotoLike(objButton, boolLiked) {

            var span = $(objButton).next();

            if(boolLiked) {
                $(objButton).text('Unlike');
                
                var text = '';

                if($(objButton).data('others')) {
                    text = 'You & ' + $(objButton).data('others') + ' like this';
                }
                else {
                    text = 'You like this';
                }
                
                $(span).text(text);
            }
            else {
                $(objButton).text('Like');
                $(span).text('');
            }
        }

        
        function User(userId, callback) {
            
            this.Id = userId;
            this.InitReady = callback;

            // represents an array of SelectedPhotosIds
            var photos = undefined;
            this.Populate = function() {

                var o = this;

                $.get('@Url.Action("GetSelectedPhotosForUser", "App")', { userId : this.Id }, function (res) { 
                    selectedPhotos = res;
                    if(o.InitReady) o.InitReady.apply();
                });
            };
            this.Populate();

            this.SelectedPhotos = function () {
                return selectedPhotos;
            };

            this.LikePhoto = function(imageName, callback) {
                $.post('@Url.Action("UserSelectPhoto", "App")', { userId : this.Id, imageName : imageName }, function(res) {
                    
                    // update array
                    if(res > 0) {
                        selectedPhotos.push(res);
                    }
                    
                    // callback
                    if(callback) callback(res);
                });
            }

            this.UnlikePhoto = function(selectedId, callback) {
                $.post('@Url.Action("UserDeselectPhoto", "App")', { userId : this.Id, selectedPhotoId : selectedId }, function() {
                    $.each(selectedPhotos, function(i){
                        if(selectedPhotos[i] == selectedId) selectedPhotos.splice(i,1);
                    });
                    if(callback) callback();
                });
            }
        }

    });
</script>